import com.github.jk1.license.LicenseReportPlugin
import com.github.jk1.license.render.ReportRenderer
import com.github.jk1.license.render.JsonReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.filter.DependencyFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.16'
  }
}

apply plugin: LicenseReportPlugin
def pathToJarLicenses = "$USER_PROJECT_ROOT/platforms/android/licenses"
def fileToJarLicenses = file(pathToJarLicenses)
if (!fileToJarLicenses.exists()) {
    mkdir pathToJarLicenses
}
def pathToLicenses = "$System.env.LICENSES_OUTPUT_PATH" 
if (pathToLicenses == "null") {
  pathToLicenses = "${getAppPath()}/android"
}
def licensesFileName = "$System.env.LICENSES_FILE_NAME" 
if (pathToLicenses == "null") {
  pathToLicenses = "licenses.json"
}
// outLogger.withStyle(Style.Info).println "LICENSES_OUTPUT_PATH: $System.env.LICENSES_OUTPUT_PATH"
// outLogger.withStyle(Style.Info).println "pathToLicenses: $pathToLicenses"
def fileToLicenses = file(pathToLicenses)
if (!fileToLicenses.exists()) {
    mkdir fileToLicenses
}
// outLogger.withStyle(Style.Info).println "pathToJarLicenses: ${fileToJarLicenses.getAbsolutePath()}"
// outLogger.withStyle(Style.Info).println "pathToLicenses: ${fileToLicenses.getAbsolutePath()}"

def relativePath =  java.nio.file.Paths.get(fileToJarLicenses.getAbsolutePath()).relativize(java.nio.file.Paths.get(fileToLicenses.getAbsolutePath())).toString()

// outLogger.withStyle(Style.Info).println "relativePath: $relativePath"
licenseReport {
      outputDir = "${pathToJarLicenses}"
        renderers = [new JsonReportRenderer("$relativePath/$licensesFileName")]
    configurations = ALL
      excludeOwnGroup = true
      excludeGroups = ['', 'androidx.*', 'com.android.tools.*', 'org.jetbrains.kotlin']
      filters = [new LicenseBundleNormalizer(bundlePath: "$USER_PROJECT_ROOT/node_modules/@nativescript-community/licenses/platforms/android/license-normalizer-bundle.json")]
}